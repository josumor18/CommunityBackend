module Api
    class PushNotification < ApplicationController
        protect_from_forgery with: :null_session

        #tipo: 1-Evento; 2-Difusion
        def createNotification(tipo, object)
            require 'fcm'

            fcm = FCM.new("AAAAUQHhwp4:APA91bGFhhqTIvUGRGkq3gahuv4GQyRqiOEO4T92tMCz6bXSIki-zqLTFMexXV5I-qaF2eSSqz0iP3z3i997T1XAxXH6uJciLl6gp6H1PmXPOSYGLroOD1uGcKcNLM_aa_I5rcvfDf7X") # Find server_key on: your firebase console on web > tab general > web api key

            #registration_ids= [device_token] # Array of keys generated by firebase for devices 

            if(tipo == 1)
                registration_ids = get_tokens(object.id_community, object.approved)
                community = Community.where(id: object.id_community).first

                options = {
                    priority: "high",
                    collapse_key: "updated_score", 
                    data: {
                        tipo: 1,
                        id: object.id,
                        id_community: object.id_community,
                        community_name: community.name,
                        title: object.title,
                        description: object.description,
                        dateEvent: object.dateEvent,
                        startTime: object.start,
                        endTime: object.end,
                        photo: object.photo,
                        approved: object.approved
                    }
                }
            else
                registration_ids = get_tokens(object.idCommunity, object.approved)
                community = Community.where(id: object.idCommunity).first

                options = {
                    priority: "high",
                    collapse_key: "updated_score",
                    data: {
                        tipo: 2,
                        id: object.id,
                        community_name: community.name,
                        idCommunity: object.idCommunity,
                        title: object.title,
                        description: object.description,
                        date: object.date,
                        photo: object.photo,
                        approved: object.approved
                    }
                }
            end
            

            response = fcm.send(registration_ids, options)
        end

        def get_tokens(id_community, approved)
            registration_ids = []
            if(approved == true)
                members = CommunityMember.where(id_community: id_community)

                members.each do |member|
                    if(member.isAdmin == false)
                        device = DeviceToken.where(id_user: member.id_user).first
                        registration_ids.push(device.token)
                    end
                end
            else
                member = CommunityMember.where(id_community: id_community).where(isAdmin: true).first
                device = DeviceToken.where(id_user: member.id_user).first
                registration_ids.push(device.token)
            end
            registration_ids
        end

        #def printSomething
            #puts "Hola"
        #end
    end
end